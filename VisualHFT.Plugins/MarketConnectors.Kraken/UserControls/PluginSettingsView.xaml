<UserControl x:Class="MarketConnectors.Kraken.UserControls.PluginSettingsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MarketConnectors.Kraken.UserControls"
             mc:Ignorable="d" >
    <Grid Margin="10">
        <StackPanel>
            <Label Content="Provider ID" Margin="0,0"/>
            <TextBox Text="{Binding ProviderId, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" Margin="0,5" />

            <Label Content="Provider Name"/>
            <TextBox Text="{Binding ProviderName, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" Margin="0,5" />

            <Label Content="API Key" Margin="0,20,0,0"/>
            <TextBox Text="{Binding ApiKey, UpdateSourceTrigger=PropertyChanged}" Margin="0,5" />

            <Label Content="API Secret" Margin="0,20,0,0"/>
            <TextBox Text="{Binding ApiSecret, UpdateSourceTrigger=PropertyChanged}" Margin="0,5" />
            <StackPanel Orientation="Horizontal" Margin="0,20,0,0">
                <Label Content="Symbols (comma separated)" />
                <TextBlock Text="ℹ️ Normalization" Cursor="Hand" Margin="10 5 0 0" >
                <TextBlock.ToolTip>
                    <ToolTip>
                        <StackPanel>
                                <TextBlock TextWrapping="Wrap" Width="350">
                                    <Run FontWeight="Bold">Symbol Normalization Explained</Run>
                                    <LineBreak />

                                    <Run>Different exchanges use varying symbol formats for the same financial instrument. For consistent analysis across exchanges, it's often beneficial to represent these symbols in a standardized format. This process is known as "normalization".</Run>

                                    <LineBreak />
                                    <LineBreak />

                                    <Run FontWeight="Bold">Why Normalize?</Run>
    
                                    <LineBreak />

                                    <Run>Imagine you're analyzing BTC/USD data from both Binance and Bitfinex. Without normalization, you'd be dealing with BTCUSDT on Binance and tBTCUSD on Bitfinex. This can be cumbersome and error-prone. Normalization allows you to represent both as BTC/USD, making your analyses clearer and more streamlined.</Run>

                                    <LineBreak />
                                    <LineBreak />

                                    <Run FontWeight="Bold">How to Input Symbols:</Run>
    
                                    <LineBreak />

                                    <Run>For the sake of clarity, you can define the normalization right within the symbol input. For example:</Run>

                                    <LineBreak />

                                    <Run>- Binance: BTCUSDT(BTC/USD),ETHUSDT(ETH/USD)</Run>
                                    <LineBreak />
                                    <Run>- Bitfinex: tBTCUSD(BTC/USD),tETHUSD(ETH/USD)</Run>

                                    <LineBreak />
                                    <LineBreak />

                                    <Run>Here, the format inside the parentheses represents the normalized symbol. If you wish not to normalize, simply omit the parentheses. However, for the validation to succeed, ensure your format adheres to the above examples.</Run>
                                </TextBlock>

                        </StackPanel>
                    </ToolTip>
                </TextBlock.ToolTip>
            </TextBlock>
            </StackPanel>
            <TextBox Text="{Binding SymbolsText, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" Margin="0,5" 
                     ToolTip="Enter symbols separated by commas (e.g., BTCUSDT,ETHUSDT)">
                <TextBox.Style>
                    <Style TargetType="TextBox">
                        <Style.Triggers>
                            <Trigger Property="Validation.HasError" Value="true">
                                <Setter Property="Background" Value="LightPink"/>
                                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </TextBox.Style>
            </TextBox>

            <Label Content="Depth Levels" Margin="0,20,0,0"/>
            <TextBox Text="{Binding DepthLevels, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" Margin="0,5" />

            <Label Content="Update Interval (ms)" Margin="0,20,0,0"/>
            <TextBox Text="{Binding UpdateIntervalMs, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" Margin="0,5" />

            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10">
                <Label Content="{Binding ValidationMessage}" Foreground="Red" HorizontalAlignment="Left" Margin="0 0 20 0" />
                <Button Content="OK" Command="{Binding OkCommand}" Margin="0,0,5,0" Width="80" />
                <Button Content="Cancel" Command="{Binding CancelCommand}" Width="80" />
            </StackPanel>
        </StackPanel>
    </Grid>
</UserControl>
